using UnityEngine;

public class TerrainGenerator : MonoBehaviour
{
    [Header("Terrain settings")]
    public int depth = 20; // Declares the depth attribute, giving it a default value of 20
    public int width = 512; // Declares the width attribute, giving it a default value of 512
    public int height = 512; // Declares the height attribute, giving it a default value of 512
    public float scale = 10; // Declares the scale attribute, giving it a default value of 10
    
    public float offsetX; // Declares the offset 
    public float offsetY; // variables as floats.
    public float offsetXInput=0; // Stores the inputted
    public float offsetYInput=0; // offset values 
    public TerrainData data; // Holds the terrain data for the creature to read
    public void Start()
    {
        offsetX = Random.Range(0, 9999); // Generates random numbers between 0 and 
        offsetY = Random.Range(0, 9999); // 9999 and assignes them to offsetX and offsetY
        Terrain terrain = GetComponent<Terrain>(); // Gets the preset terrain info set by unity
        data = GenerateTerrain(terrain.terrainData); // Writes over this info with the generated values
        terrain.terrainData = data; // Saves the data back to the terrain
    }
    public void Update()
    {
        try // Checks if there is data available in the offset settings
        {
            // Gets the data
            SliderNumberHandler offsetXHandler = GameObject.Find("OffsetX slider").GetComponent<SliderNumberHandler>();
            SliderNumberHandler offsetYHandler = GameObject.Find("OffsetY slider").GetComponent<SliderNumberHandler>();
            offsetXInput = offsetXHandler.value;
            offsetYInput = offsetYHandler.value;
        }
        catch {
            return;
        }
        
    }
    public void StartBtn() // Start button method declared, executes when the start button is pressed
    {
        Debug.Log(offsetXInput);
        Debug.Log(offsetYInput);
        // If the offsets are 0
        if (offsetXInput == 0 && offsetYInput == 0)
        {
            // Make both offsets random
            offsetX = Random.Range(0, 9999); // Generates random numbers between 0 and 
            offsetY = Random.Range(0, 9999); // 9999 and assignes them to offsetX and offsetY
        }
        else {
            // Sets the offset value to the inputs
            offsetX = offsetXInput;
            offsetY = offsetYInput;
        }
        Terrain terrain = GetComponent<Terrain>(); // Gets the preset terrain info set by unity
        data = GenerateTerrain(terrain.terrainData); // Writes over this info with the generated values
        terrain.terrainData = data; // Saves the data back to the terrain
    }
    TerrainData GenerateTerrain(TerrainData terrainData) { // Generate method function declared, taking one
                                                           // TerrainData parameter, and returning a TerrainData variable
        terrainData.heightmapResolution = width + 1; // Sets the size of the heightmap
        terrainData.size = new Vector3(width, depth, height); // Sets the size of the terrain
        terrainData.SetHeights(0, 0, GenerateHeightMap()); // Sets the heightmap generated by the generate height map function
        return terrainData; // Returns the set information
    }
    float[,] GenerateHeightMap() // Generate height map method declared, returing a 2d float array
    {
        float[,] heights = new float[width, height]; // 2d float array declared, of the size width and height
        for (int x = 0; x < width; x++) // First set of values looped through in array
        {
            for (int y = 0; y < height; y++) // Second set of values looped through in array
            {
                if (x == 0 || y == 0) // If either values are 0
                {
                    heights[x, y] = 0; // The height is 0
                }
                else // If neither are 0
                {
                    heights[x, y] = CalculateHeight(x, y); // The height is determined by the calculate height method
                }
            }
        }
       
        return heights; // The array is returned
    }
    public float CalculateHeight(float x, float y) { // Calculate height method declared, taking 2 parameters, and returning a float
        
        float xCoord = (float)x / width * scale + offsetX; // The x coordinate is formatted for the perlin noise, and offset is added
        float yCoord = (float)y / height * scale + offsetY; // The y coordinate is formatted for the perlin noise, and offset is added
        float Y = Mathf.PerlinNoise(xCoord, yCoord); // The perlin noise is extracted from the point
        return Y; // The perlin noise is returned

    }

}
